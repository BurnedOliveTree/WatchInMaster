create table account
(
    id integer generated by default as identity
        constraint pk__account primary key,
    activated boolean not null,
    email varchar(255) not null
        constraint uq__account_email unique,
    password varchar(255) not null,
    username varchar(255) not null
        constraint uq__account_username unique
);

create index idx__account_username on account(username);

create table resource
(
    id uuid not null
        constraint pk__resource primary key,
    type varchar(255) not null,
    file_content_type varchar(255),
    file_size bigint
);

create table channel
(
    account_id integer not null
        constraint pk__channel primary key
        constraint fk__channel__account references account,
    creation_date timestamp not null,
    description varchar(255),
    avatar_resource_id uuid
        constraint fk__channel_avatar__resource references resource,
    background_resource_id uuid
        constraint fk__background_avatar__resource references resource
);

create table video
(
    id uuid not null
        constraint pk__video primary key,
    description text,
    title varchar(255) not null,
    channel_id integer
        constraint fk__video__channel references channel,
    thumbnail_resource_id uuid
        constraint fk__video_thumbnail__resource references resource,
    frame_resource_id uuid
        constraint fk__video_frame__resource references resource,
    uploaded timestamp not null,
    length bigint not null,
    views bigint default 0 not null,
    visibility varchar(255) not null,
    status varchar(255) not null
);

create index idx__video_title on video(title);
create index idx__video_search on video using gist ((title || ' ' || COALESCE(description, '')) gist_trgm_ops);

create table video_resource
(
    id integer generated by default as identity
        constraint pk__video_resource primary key,
    quality varchar(255) not null,
    ordinal integer not null,
    resource_id uuid
        constraint fk__video_resource__resource references resource,
    video_id uuid
        constraint fk__video_resource__video references video,
    constraint uq__video_resource__video_quality unique (video_id, quality)
);

create table video_like
(
    id integer generated by default as identity
        constraint pk__video_like primary key,
    liked boolean not null,
    channel_id integer
        constraint fk__video_like__channel references channel,
    video_id uuid
        constraint fk__video_like__video references video,
    constraint uq__video_like__video_channel unique (video_id, channel_id)
);

create table video_comment
(
    id integer generated by default as identity
        constraint pk__video_comment primary key,
    creation_date timestamp not null,
    content text not null,
    channel_id integer
        constraint fk__video_comment__channel references channel,
    video_id uuid
        constraint fk__video_comment__video references video
);

create table subscription
(
    id integer generated by default as identity
        constraint pk__subscription primary key,
    channel_id integer
        constraint fk__subscription_channel__channel references channel,
    subscriber_id integer
        constraint fk__subscription_subscriber__channel references channel,
    constraint uq__subscription__channel_subscriber unique (channel_id, subscriber_id)
);

create table video_favorite
(
    id integer generated by default as identity
        constraint pk__video_favorite primary key,
    channel_id integer
        constraint fk__video_favorite__channel references channel,
    video_id uuid
        constraint fk__video_favorite__video references video,
    constraint uq__video_favorite__channel_video unique (channel_id, video_id)
);

create table video_watch_later
(
    id integer generated by default as identity
        constraint pk__video_watch_later primary key,
    channel_id integer
        constraint fk__video_watch_later__channel references channel,
    video_id uuid
        constraint fk__video_watch_later__video references video,
    constraint uq__video_watch_later__channel_video unique (channel_id, video_id)
);

create table statistics
(
    id integer generated by default as identity
        constraint pk__statistics primary key,
    date timestamp not null,
    comments bigint not null,
    subscribers bigint not null,
    videos bigint not null,
    views bigint not null,
    channel_id integer
        constraint fk__statistics__channel references channel
);
